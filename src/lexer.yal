{header}
(* Ejemplo de lexer que incorpora:
   - Literales de carácter y secuencias de escape (por ejemplo, 'a', '\t')
   - El símbolo "_" que matchea cualquier carácter.
   - Constantes de cadena entre comillas dobles (con secuencias de escape).
   - Conjuntos de caracteres (por ejemplo, [0-9], [a-zA-Z]).
   - Conjuntos complementarios (por ejemplo, [^a]).
   - Diferencia de conjuntos (por ejemplo, [0-9]#[5-9]).
   - Operadores de repetición: *, + y opción (?).
   - Unión (|) y concatenación implícita.
   - Agrupación con paréntesis.
   - Referencias a definiciones (identificadores).
*)

let delim      = '\n'
let ws         = delim+  
let digit      = [0-9]
let smallDigit = [0-2]
let number     = digit+
let letter     = [a-zA-Z]
let identifier = letter (letter | digit)*

(* Constantes de cadena y de carácter *)
let strconst   = "hello\nworld"
let char_a     = 'a'
let char_tab   = '\t'

(* Caso especial: _ matchea cualquier carácter *)
let any_char   = _

(* Conjuntos y operadores sobre conjuntos *)
let diff_digit = [0-9]#[5-9]         (* Dígitos del 0 al 9, excepto del 5 al 9 *)
let not_a      = [^a-zA-Z]           (* Cualquier carácter que no sea 'a' *)

(* Operadores de opción: el literal '+' o '-' de forma opcional *)
let b_operator  = (b|c)?              (* El literal '+' es opcional *)
let a_operator = a?              (* El literal '-' es opcional *)

rule tokens [ ] =

    ws              { /* Se ignora el espacio en blanco */ }
  | number          { return NUMBER; }
  | identifier      { return IDENTIFIER; }
  | strconst        { return STRING; }
  | char_a          { return CHAR_A; }
  | char_tab        { return TAB; }
  | any_char        { return ANY; }
  | diff_digit      { return DIGIT_DIFF; }
  | not_a           { return NOT_A; }
  | b_operator        { return B_OPERATOR; }
  | a_operator       { return A_OPERATOR; }
  | '('             { return LPAREN; }
  | ')'             { return RPAREN; }
  | '+'             { return PLUS; }
  | '*'             { return TIMES; }
  | eof              { return EOF; }

{trailer}
(* Fin de la definición del lexer *)
